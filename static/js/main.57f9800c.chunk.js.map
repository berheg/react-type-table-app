{"version":3,"sources":["Components/GlobalFilter.js","Table.js","data/COLUMNS.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","React","useState","value","setValue","onChange","useAsyncDebounce","undefined","className","e","target","placeholder","Table","columns","data","useTable","initialState","pageIndex","useFilters","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","page","nextPage","previousPage","canPreviousPage","canNextPage","pageOptions","prepareRow","state","gotoPage","pageCount","setPageSize","pageSize","map","headerGroup","headers","column","Filter","for","id","render","border","getHeaderGroupProps","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","onClick","disabled","length","type","defaultValue","pageNumber","Number","style","width","COLUMNS","Header","accessor","App","useMemo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57f9800c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  useAsyncDebounce\r\n} from 'react-table';\r\nfunction GlobalFilter({\r\n  preGlobalFilteredRows,\r\n  globalFilter,\r\n  setGlobalFilter,\r\n}) {\r\n  const [value, setValue] = React.useState(globalFilter)\r\n  const onChange = useAsyncDebounce(value => {\r\n    setGlobalFilter(value || undefined)\r\n  }, 200)\r\n\r\n  return (\r\n    <span>\r\n      <input className=\"searchInput\"\r\n        value={value || \"\"}\r\n        onChange={e => {\r\n          setValue(e.target.value);\r\n          onChange(e.target.value);\r\n        }}\r\n        placeholder={\"Search Table ...\"}\r\n      />\r\n    </span>\r\n  )\r\n}\r\n\r\nexport default GlobalFilter;\r\n","import React from \"react\";\r\nimport GlobalFilter from './Components/GlobalFilter';\r\nimport { useTable,\r\n  useGlobalFilter,\r\n  useFilters, useSortBy,\r\n  usePagination\r\n} from 'react-table';\r\n\r\n\r\nfunction Table({ columns, data }) {\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    page,\r\n    nextPage,\r\n    previousPage,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    prepareRow,\r\n    state,\r\n    gotoPage,\r\n    pageCount,\r\n    setPageSize,\r\n    preGlobalFilteredRows, // new\r\n    setGlobalFilter,\r\n  } =\r\n    useTable({\r\n      columns,\r\n      data,\r\n      initialState: { pageIndex: 0 }\r\n    },\r\n\r\n    useFilters,\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    usePagination,\r\n    );\r\n    const { pageIndex, pageSize } = state;\r\n    // Define a default UI for filtering\r\n    // Define a default UI for filtering\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    <>\r\n        <GlobalFilter\r\n        preGlobalFilteredRows={preGlobalFilteredRows}\r\n        globalFilter={state.globalFilter}\r\n        setGlobalFilter={setGlobalFilter}\r\n      />\r\n\r\n      {headerGroups.map((headerGroup) =>\r\n        headerGroup.headers.map((column) =>\r\n          column.Filter ? (\r\n            <div key={column.id}>\r\n              <label for={column.id}>{column.render(\"Header\")}: </label>\r\n              {column.render(\"Filter\")}\r\n            </div>\r\n          ) : null\r\n        )\r\n      )}\r\n\r\n    <table {...getTableProps()} border=\"1\">\r\n\r\n      <thead>\r\n        {headerGroups.map((headerGroup) => (\r\n          <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map((column) => (\r\n              <th {...column.getHeaderProps(column.getSortByToggleProps())}>{column.render(\"Header\")}\r\n              <span className=\"sort-btn\">\r\n                  {column.isSorted\r\n                    ? column.isSortedDesc\r\n                      ? ' ▼'\r\n                      : ' ▲'\r\n                    : ''}\r\n                </span>\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()} className=\"table-container\">\r\n        {page.map((row, i) => {\r\n          prepareRow(row);\r\n          return (\r\n            <tr {...row.getRowProps()}>\r\n              {row.cells.map((cell) => {\r\n                return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\r\n              })}\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n\r\n    <div>\r\n    <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {'<<'}\r\n        </button>{' '}\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          Previous\r\n        </button>{' '}\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          Next\r\n        </button>{' '}\r\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {'>>'}\r\n        </button>{' '}\r\n        <span>\r\n          Page{' '}\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>{' '}\r\n        </span>\r\n        <span>\r\n          | Go to page:{' '}\r\n          <input\r\n            type='number'\r\n            defaultValue={pageIndex + 1}\r\n            onChange={e => {\r\n              const pageNumber = e.target.value ? Number(e.target.value) - 1 : 0\r\n              gotoPage(pageNumber)\r\n            }}\r\n            style={{ width: '50px' }}\r\n          />\r\n        </span>{' '}\r\n        <select\r\n          value={pageSize}\r\n          onChange={e => setPageSize(Number(e.target.value))}>\r\n          {[10, 25, 50].map(pageSize => (\r\n            <option key={pageSize} value={pageSize}>\r\n              Show {pageSize}\r\n            </option>\r\n          ))}\r\n        </select>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import {columnType} from '../Interface/Interface';\r\nconst COLUMNS: columnType[] = [\r\n  {\r\n    Header: \"Name\",\r\n    accessor: \"name\",\r\n  },\r\n  {\r\n    Header: \"Gender\",\r\n    accessor: \"gender\",\r\n  },\r\n  {\r\n    Header: \"Company\",\r\n    accessor: \"company\",\r\n  },\r\n  {\r\n    Header: \"Email\",\r\n    accessor: \"email\",\r\n  },\r\n]\r\n\r\nexport default COLUMNS;\r\n","import React from \"react\";\nimport './App.css';\nimport Table from \"./Table\";\nimport {SelectColumnFilter} from \"./Components/SelectColumnFilter\";\nimport data from './data/generated.json';\nimport COLUMNS from './data/COLUMNS';\nconst getData = () => data;\n\nfunction App() {\n  const columns = React.useMemo(\n    () => COLUMNS,\n    []\n  );\n\n  const data = React.useMemo(() => getData(), []);\n\n  return (\n    <>\n      <div className=\"App\">\n        <Table columns={columns} data={data} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}